// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { PVTTilePoint } from './pvttile-point.js';

export class PVTGeometry {
    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;
    __init(i: number, bb: flatbuffers.ByteBuffer): PVTGeometry {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    static getRootAsPVTGeometry(bb: flatbuffers.ByteBuffer, obj?: PVTGeometry): PVTGeometry {
        return (obj || new PVTGeometry()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    static getSizePrefixedRootAsPVTGeometry(bb: flatbuffers.ByteBuffer, obj?: PVTGeometry): PVTGeometry {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new PVTGeometry()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    points(index: number, obj?: PVTTilePoint): PVTTilePoint | null {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset
            ? (obj || new PVTTilePoint()).__init(this.bb!.__vector(this.bb_pos + offset) + index * 4, this.bb!)
            : null;
    }

    pointsLength(): number {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
    }

    static startPVTGeometry(builder: flatbuffers.Builder) {
        builder.startObject(1);
    }

    static addPoints(builder: flatbuffers.Builder, pointsOffset: flatbuffers.Offset) {
        builder.addFieldOffset(0, pointsOffset, 0);
    }

    static startPointsVector(builder: flatbuffers.Builder, numElems: number) {
        builder.startVector(4, numElems, 2);
    }

    static endPVTGeometry(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        return offset;
    }

    static createPVTGeometry(builder: flatbuffers.Builder, pointsOffset: flatbuffers.Offset): flatbuffers.Offset {
        PVTGeometry.startPVTGeometry(builder);
        PVTGeometry.addPoints(builder, pointsOffset);
        return PVTGeometry.endPVTGeometry(builder);
    }
}
