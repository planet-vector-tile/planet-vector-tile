
struct Chunk {
    loc: uint64;
    len: uint32;
}

table Tile {
    chunks: [Chunk];
}

table Planet {
    zoom: u8;

    // index is the hilbert number for the given tile
    // 4^10 = 1,048,576         8MB
    // 4^11 = 4,194,304         32MB
    // 4^12 = 16,777,216        128MB           12 seems to make the most sense?
    // 4^13 = 67,108,864        512MB
    // 4^14 = 268,435,456       2048MB
    tiles: [Tile];

    values: [Value];
    strings: [string];
}

table Edge {
    // Point on Surface Hilbert location for the edge itself
    loc: uint64;

    // Hilbert index, which can be converted to a LatLon.
    // Empty if just a point.
    h: [uint64];

    // Would it make sense to have this be int32 that is an ofset from loc?
    // h: [int32];

    // Keys
    k: [uint64];

    // Values
    v: [uint64];
}

// All the primitives that can be represented in JavaScript
enum PVTValueType: uint8 {
    String, Number, Boolean
}

struct Value {
    t: PVTValueType;
    v: float64; // index to string, otherwise, just coerce the float64
}

