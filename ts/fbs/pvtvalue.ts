// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers'

import { PVTValueType } from './pvtvalue-type'

export class PVTValue {
    bb: flatbuffers.ByteBuffer | null = null
    bb_pos = 0
    __init(i: number, bb: flatbuffers.ByteBuffer): PVTValue {
        this.bb_pos = i
        this.bb = bb
        return this
    }

    t(): PVTValueType {
        return this.bb!.readUint8(this.bb_pos)
    }

    v(): number {
        return this.bb!.readFloat64(this.bb_pos + 8)
    }

    static sizeOf(): number {
        return 16
    }

    static createPVTValue(builder: flatbuffers.Builder, t: PVTValueType, v: number): flatbuffers.Offset {
        builder.prep(8, 16)
        builder.writeFloat64(v)
        builder.pad(7)
        builder.writeInt8(t)
        return builder.offset()
    }
}
