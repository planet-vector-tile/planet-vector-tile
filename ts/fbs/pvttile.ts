// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { PVTLayer } from './pvtlayer';
import { PVTValue } from './pvtvalue';

export class PVTTile {
    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;
    __init(i: number, bb: flatbuffers.ByteBuffer): PVTTile {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    static getRootAsPVTTile(bb: flatbuffers.ByteBuffer, obj?: PVTTile): PVTTile {
        return (obj || new PVTTile()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    static getSizePrefixedRootAsPVTTile(bb: flatbuffers.ByteBuffer, obj?: PVTTile): PVTTile {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new PVTTile()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }

    layers(index: number, obj?: PVTLayer): PVTLayer | null {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset
            ? (obj || new PVTLayer()).__init(
                  this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4),
                  this.bb!
              )
            : null;
    }

    layersLength(): number {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
    }

    strings(index: number): string;
    strings(index: number, optionalEncoding: flatbuffers.Encoding): string | Uint8Array;
    strings(index: number, optionalEncoding?: any): string | Uint8Array | null {
        const offset = this.bb!.__offset(this.bb_pos, 6);
        return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }

    stringsLength(): number {
        const offset = this.bb!.__offset(this.bb_pos, 6);
        return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
    }

    values(index: number, obj?: PVTValue): PVTValue | null {
        const offset = this.bb!.__offset(this.bb_pos, 8);
        return offset
            ? (obj || new PVTValue()).__init(this.bb!.__vector(this.bb_pos + offset) + index * 16, this.bb!)
            : null;
    }

    valuesLength(): number {
        const offset = this.bb!.__offset(this.bb_pos, 8);
        return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
    }

    static startPVTTile(builder: flatbuffers.Builder) {
        builder.startObject(3);
    }

    static addLayers(builder: flatbuffers.Builder, layersOffset: flatbuffers.Offset) {
        builder.addFieldOffset(0, layersOffset, 0);
    }

    static createLayersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]!);
        }
        return builder.endVector();
    }

    static startLayersVector(builder: flatbuffers.Builder, numElems: number) {
        builder.startVector(4, numElems, 4);
    }

    static addStrings(builder: flatbuffers.Builder, stringsOffset: flatbuffers.Offset) {
        builder.addFieldOffset(1, stringsOffset, 0);
    }

    static createStringsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]!);
        }
        return builder.endVector();
    }

    static startStringsVector(builder: flatbuffers.Builder, numElems: number) {
        builder.startVector(4, numElems, 4);
    }

    static addValues(builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset) {
        builder.addFieldOffset(2, valuesOffset, 0);
    }

    static startValuesVector(builder: flatbuffers.Builder, numElems: number) {
        builder.startVector(16, numElems, 8);
    }

    static endPVTTile(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        return offset;
    }

    static finishPVTTileBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {
        builder.finish(offset);
    }

    static finishSizePrefixedPVTTileBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {
        builder.finish(offset, undefined, true);
    }

    static createPVTTile(
        builder: flatbuffers.Builder,
        layersOffset: flatbuffers.Offset,
        stringsOffset: flatbuffers.Offset,
        valuesOffset: flatbuffers.Offset
    ): flatbuffers.Offset {
        PVTTile.startPVTTile(builder);
        PVTTile.addLayers(builder, layersOffset);
        PVTTile.addStrings(builder, stringsOffset);
        PVTTile.addValues(builder, valuesOffset);
        return PVTTile.endPVTTile(builder);
    }
}
