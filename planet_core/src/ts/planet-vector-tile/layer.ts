// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Feature } from '../planet-vector-tile/feature';


export class Layer {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Layer {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsLayer(bb:flatbuffers.ByteBuffer, obj?:Layer):Layer {
  return (obj || new Layer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsLayer(bb:flatbuffers.ByteBuffer, obj?:Layer):Layer {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Layer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

name():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

features(index: number, obj?:Feature):Feature|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Feature()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

featuresLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startLayer(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addName(builder:flatbuffers.Builder, name:number) {
  builder.addFieldInt32(0, name, 0);
}

static addFeatures(builder:flatbuffers.Builder, featuresOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, featuresOffset, 0);
}

static createFeaturesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startFeaturesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endLayer(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createLayer(builder:flatbuffers.Builder, name:number, featuresOffset:flatbuffers.Offset):flatbuffers.Offset {
  Layer.startLayer(builder);
  Layer.addName(builder, name);
  Layer.addFeatures(builder, featuresOffset);
  return Layer.endLayer(builder);
}
}
