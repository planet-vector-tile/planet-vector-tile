// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Layer } from '../planet-vector-tile/layer';


export class Tile {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Tile {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTile(bb:flatbuffers.ByteBuffer, obj?:Tile):Tile {
  return (obj || new Tile()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTile(bb:flatbuffers.ByteBuffer, obj?:Tile):Tile {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Tile()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

layers(index: number, obj?:Layer):Layer|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Layer()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

layersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

strings(index: number):string
strings(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
strings(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

stringsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startTile(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addLayers(builder:flatbuffers.Builder, layersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, layersOffset, 0);
}

static createLayersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startLayersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addStrings(builder:flatbuffers.Builder, stringsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, stringsOffset, 0);
}

static createStringsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startStringsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endTile(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishTileBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedTileBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createTile(builder:flatbuffers.Builder, layersOffset:flatbuffers.Offset, stringsOffset:flatbuffers.Offset):flatbuffers.Offset {
  Tile.startTile(builder);
  Tile.addLayers(builder, layersOffset);
  Tile.addStrings(builder, stringsOffset);
  return Tile.endTile(builder);
}
}
